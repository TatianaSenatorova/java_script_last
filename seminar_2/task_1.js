"use strict";

//Давайте создадим класс для управления банковским счетом. В этом классе будет приватное
//свойство для хранения текущего баланса, а также методы для внесения и снятия денег со счета.
//1. Класс должен содержать приватное свойство #balance, которое инициализируется
//значением 0 и представляет собой текущий баланс счета.
//2. Реализуйте геттер balance, который позволит получить информацию о текущем балансе.
//3. Реализуйте метод deposit(amount), который позволит вносить средства на счет.
//Убедитесь, что сумма внесения не отрицательная; в противном случае выбрасывайте
//ошибку.
//4. Реализуйте метод withdraw(amount), который позволит снимать средства со счета.
//Убедитесь, что сумма для снятия неотрицательная и что на счете достаточно средств; в
//противном случае выбрасывайте ошибку.
//5. Реализуйте конструктор, который принимает начальный баланс в качестве аргумента.
//Убедитесь, что начальный баланс не отрицательный; в противном случае выбрасывайте
//ошибку.

class bankAccount {
  #balance = 0;
  constructor(amount) {
    if (typeof amount !== "number" || amount < 0) {
      throw new Error("Депозит равен нулю или не число");
    }
    this.#balance = amount;
  }

  get balance() {
    return this.#balance;
  }

  deposit(amount) {
    if (typeof amount !== "number" || amount < 0) {
      throw new Error("Депозит равен нулю или не число");
    }
    return (this.#balance += amount);
  }

  withdraw(amount) {
    if (typeof amount !== "number" || amount < 0 || amount > this.#balance) {
      throw new Error(
        "Сумма снятия больше депозита или не число или меньше нуля"
      );
    }
    return (this.#balance -= amount);
  }
}

let account = new bankAccount(100);
console.log(account.balance);
console.log(account.deposit(1000));
console.log(account.withdraw(1000));

