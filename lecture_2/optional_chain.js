'use strict';

//Опциональная цепочка вызовов - позволяет избежать генерации ошибок при несуществующем (равным null или undefined) элементе цепочки объекта 

//Опциональная цепочка вызовов и оператор нулевого слияния
//Объект с информацией о пользователе

const user = {
    name: 'John', 
    age: 30,
    address: {
        city: 'New York',
        street: '123 Main St'
    },
    contacts: {
        email: 'john@example.com',
        phone: '+1234567890'
    }
};

//Опциональная цепочка вызовов методов
//Опциональная цепочка ?. останавливает вычисление и возвращает undefined, если значение перед ?. равно undefined или null.
//Нам следует использовать ?. только там, где нормально, что чего-то может не существовать.
//К примеру, если, в соответствии с логикой нашего кода, объект user должен существовать, но address является необязательным, то нам следует писать user.address?.street, но не user?.address?.street.
//В этом случае, если вдруг user окажется undefined, мы увидим программную ошибку по этому поводу и исправим её. В противном случае, если слишком часто использовать ?., ошибки могут замалчиваться там, где это неуместно, и их будет сложнее отлаживать.
//Переменная перед ?. должна быть объявлена. Если переменной user вообще нет, то user?.anything приведёт к ошибке.
const email = user?.contacts?.email; //
console.log(email);

//если значение не определено или равно null или undefined, используется значение по умолчанию
const defaultValue = user?.otherValue ?? 'Default Value';
console.log(defaultValue); //выводит Default Val7ue так как свойство otherValue не существует в объекте user

const streetName = user?.address?.street ?? 'Unknown';
console.log(streetName);//123 Main St выводит, так как свойство street есть в объекте user.address